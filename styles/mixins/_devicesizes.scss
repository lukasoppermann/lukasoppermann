$_breakpoints: (
  "landscape": 576px, // >= mobile landscape phones
  "tablet": 768px, // >= tablets
  "desktop":  992px,  // >= desktop
  "large":  1200px, // >= large desktop
  "extra":  1440px // >= extra large desktop
);

@mixin smaller_than($width: null) {
  @include _mediaquery ($width, max, 0.02px) {
    @content;
  }
}

@mixin at_least($width: null) {
  @include _mediaquery ($width, min) {
    @content;
  }
}

@mixin is($breakpoint: null) {
  // get breakpoint width
  $breakpointWidth: _get_breakpoint($breakpoint);
  // check if valid breakpoint
  @if $breakpointWidth != false {
    // get next breakpoint
    $nextBreakpoint: _next_map_value($breakpoint, $_breakpoints);
    // guard against erronious $width
    @if type_of($breakpointWidth) == number and type_of($nextBreakpoint) == number {
      // remove one px if using max-width
      $breakpointWidth: $breakpointWidth - 0.02px;
      $nextBreakpoint: $nextBreakpoint - 0.02px;
      @media only screen and (min-width: $breakpointWidth) and (max-width: $nextBreakpoint) {
        @content;
      }
    }
  }
}

@function _get_breakpoint($name: null) {
  @if $name != null {
    @if map_has_key($_breakpoints, $name) {
      @return map_get($_breakpoints, $name);
    }
    @return false;
  }
  @else {
    @error "Variable $name not defined in _get_breakpoint";
  }
}

@mixin _mediaquery($width:null, $type:null, $substract: 0) {
  // get correct width
  $breakpointWidth: _get_breakpoint($width);
  @if $breakpointWidth != false {
    $width: $breakpointWidth;
  }
  // guard against erronious $width
  @if type_of($width) == number {
    // remove one px if using max-width
    $width: $width - $substract;
    @media only screen and (#{$type}-width: $width) {
      @content;
    }
  }
  @else {
    @error "Wrongly specified device with `#{$width}` use px width or one of the keys (landscape, tablet, desktop, large or extra)";
  }
}

@function _next_map_value($currentValue, $map) {
  // get current key from list
  $keys: map-keys($map);
  // find index of current value and add 1
  $nextIndex: ( index($keys, $currentValue) ) + 1;
  // return next value
  @return nth(map-values($map), $nextIndex);
}
